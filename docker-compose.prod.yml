version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: commerzbank-postgres-prod
    environment:
      POSTGRES_DB: commcomm_db
      POSTGRES_USER: commcomm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - commerzbank-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commcomm_user -d commcomm_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: commerzbank-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://commcomm_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/commcomm_db?schema=public
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-COMMTAN@123}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80,http://localhost}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:80}
      API_URL: ${API_URL:-http://localhost:3001/api}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING:-true}
    volumes:
      - uploads_data_prod:/app/uploads
    networks:
      - commerzbank-network-prod
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: commerzbank-frontend-prod
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - commerzbank-network-prod
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: commerzbank-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - commerzbank-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: commerzbank-nginx-prod
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - commerzbank-network-prod
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  uploads_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  commerzbank-network-prod:
    driver: bridge
